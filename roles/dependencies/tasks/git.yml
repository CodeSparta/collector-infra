---
####### Clone Git Dependencies
- name: '{{ ansible_name_module }} | stat | Check for Git Clone'
  stat:
    path: '{{ dir_ansible }}/clone.date'  
  register: git_clone_check

- name: '{{ ansible_name_module }} | git:clone.{{ git_branch }} | Clone Git Dependencies' 
  git:
    clone: yes
    version: "{{ git_branch }}"
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
#   key_file: "{{ item.key_file }}"
  with_items:
    - "{{ ansiblerepos }}"
    - "{{ terraformrepos }}"
  when:
    - git_clone_check.stat.exists == False

- name: '{{ ansible_name_module }} | Place Git Clone Lock {{ dir_ansible }}/clone.date' 
  copy: 
    content: "{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
    dest: '{{ dir_ansible }}/clone.date'

- name: '{{ ansible_name_module }} | shell:terraform.init | Initilize terraform modules'
  shell: 
    cmd: terraform init
    chdir: "{{ item }}"
  with_items:
    - "{{ terraformrepos }}"

- name: '{{ ansible_name_module }} | git:clone.{{ git_branch }} | Clone Git Dependencies' 
  shell:
    chdir: "{{ item.dest }}"
    cmd: git pull
  with_items:
    - "{{ ansiblerepos }}"
    - "{{ terraformrepos }}"
  when:
    - git_clone_check.stat.exists == True
  ignore_errors: true

